<?php

namespace LX\OAuthBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * OAuthRemoteServerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OAuthRemoteServerRepository extends EntityRepository
{
    const STATUS_INACTIVE = 0;
    const STATUS_ACTIVE   = 1;

    /**
     * @var array $statuses Statuses
     */
    protected $statuses = array(
        self::STATUS_INACTIVE => 'Inactive',
        self::STATUS_ACTIVE   => 'Active',
    );

    /**
     * @var array $types Types
     */
    protected $types = array(
        'oauth1' => 'OAuth 1.0a'
    );

    /**
     * Return statuses
     *
     * @return array
     */
    public function getStatuses()
    {

        return $this->statuses;
    }


    /**
     * Return types
     *
     * @return array
     */
    public function getTypes()
    {

        return $this->types;
    }

    /**
     * Return the query for pager
     *
     * @param array $filters A list of criterias
     *
     * @return Query
     *
     * @author Alix Chaysinh <alix.chaysinh@gmail.com>
     * @since  2013-10-16
     */
    public function queryForPager($filters = array())
    {
        // QueryBuilder
        $qb = $this->createQueryBuilder('oars');

        if (!empty($filters)) {
            foreach ($filters as $field => $value) {
                // Method name
                $methodName = 'setCriteria'.ucfirst($field);

                if (!empty($value) && method_exists($this, $methodName)) {
                    // Call the method
                    $this->$methodName($qb, $field, $value);
                }
            }
        }

        return $qb->getQuery();
    }

    /**
     * Set criteria for field name
     *
     * @param QueryBuilder $qb    query Builder
     * @param string       $field field name
     * @param mixed        $value value
     *
     * @return void
     */
    public function setCriteriaName(QueryBuilder $qb, $field, $value)
    {
        $this->addQbLike($qb, $field, $value);
    }

    /**
     * Set criteria for field baseUrl
     *
     * @param QueryBuilder $qb    query Builder
     * @param string       $field field name
     * @param mixed        $value value
     *
     * @return void
     */
    public function setCriteriaBaseUrl(QueryBuilder $qb, $field, $value)
    {
        $this->addQbLike($qb, $field, $value);
    }

    /**
     * Set criteria for field type
     *
     * @param QueryBuilder $qb    query Builder
     * @param string       $field field name
     * @param mixed        $value value
     *
     * @return void
     */
    public function setCriteriaType(QueryBuilder $qb, $field, $value)
    {
        $this->addQbIn($qb, $field, $value);
    }

    /**
     * Set criteria for field status
     *
     * @param QueryBuilder $qb    query Builder
     * @param string       $field field name
     * @param mixed        $value value
     *
     * @return void
     */
    public function setCriteriaStatus(QueryBuilder $qb, $field, $value)
    {
        $this->addQbIn($qb, $field, $value);
    }


    /**
     * Add where like in qb
     *
     * @param QueryBuilder $qb    query Builder
     * @param string       $field field name
     * @param mixed        $value value
     *
     * @return void
     */
    public function addQbLike(QueryBuilder $qb, $field, $value)
    {
        $aliases   = $qb->getRootAliases();
        $rootAlias = $aliases[0];

        $qb->andWhere($rootAlias.'.'.$field.' LIKE :'.$field);
        $qb->setParameter($field, '%'.$value.'%');
    }

    /**
     * Add where in in qb
     *
     * @param QueryBuilder $qb    query Builder
     * @param string       $field field name
     * @param mixed        $value value
     *
     * @return void
     */
    public function addQbIn(QueryBuilder $qb, $field, $value)
    {
        $aliases   = $qb->getRootAliases();
        $rootAlias = $aliases[0];

        $qb->andWhere($rootAlias.'.'.$field.' IN (:'.$field.')');
        $qb->setParameter($field, $value);
    }
}
